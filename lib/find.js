// Generated by CoffeeScript 1.6.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(function(require, exports) {
    var Ractive, all_tabs, c2m, cirru, fuzzy, gotoTab, initialTab, input, isKeyword, listTmpl, listTmplText, menu, page_list, q, show_list, suggest;
    Ractive = require("Ractive");
    cirru = require("cirru");
    c2m = require("c2m");
    listTmplText = require("text!cirru_list");
    cirru.parse.compact = true;
    listTmpl = c2m.render(cirru.parse(listTmplText));
    isKeyword = function(char) {
      return char.match(/[\w\d\s\u4E00-\u9FA5]/) != null;
    };
    fuzzy = function(text) {
      var query;
      query = text.split('').filter(isKeyword).join('.*');
      return new RegExp(query, 'i');
    };
    q = function(query) {
      return document.querySelector(query);
    };
    page_list = new Ractive({
      el: q('#menu'),
      template: listTmpl,
      data: {
        currentAt: 0,
        list: [],
        highlightSelected: function(selected) {
          if (selected) {
            return "selected";
          } else {
            return "";
          }
        },
        highlightCurrentAt: function(currentAt, num) {
          if (currentAt === num) {
            return "currentAt";
          } else {
            return "";
          }
        }
      }
    });
    initialTab = void 0;
    chrome.extension.onMessage.addListener(function(request) {
      console.log("got extension request", request);
      if (request.type === "initial") {
        return initialTab = request.tab;
      }
    });
    window.onbeforeunload = function() {
      return chrome.extension.sendMessage({
        word: 'close'
      }, function(res) {
        return console.log('after close', res);
      });
    };
    input = q('#key');
    menu = q('#menu');
    all_tabs = [];
    chrome.tabs.query({}, function(tabs) {
      tabs.map(function(tab) {
        if (tab.title === 'Search Tabs') {
          return console.log('hide', tab);
        } else if (initialTab.id === tab.id) {
          all_tabs.unshift(tab);
          return chrome.extension.sendMessage({
            word: 'log',
            data: tab
          });
        } else {
          return all_tabs.push(tab);
        }
      });
      page_list.data.list = all_tabs;
      return page_list.update("list");
    });
    show_list = function(list) {
      page_list.data.list = list;
      page_list.update("list");
      if (list[0] != null) {
        return gotoTab(list[0].id);
      }
    };
    suggest = function(text) {
      var addOne, list;
      page_list.data.currentAt = 0;
      list = [];
      addOne = function(tab) {
        var urlList, _ref;
        if (tab.url.match(/^http/) != null) {
          urlList = list.map(function(tab) {
            return tab.url;
          });
          if (_ref = tab.url, __indexOf.call(urlList, _ref) < 0) {
            return list.push(tab);
          }
        }
      };
      all_tabs.filter(function(tab) {
        return tab.title.indexOf(text) >= 0;
      }).map(addOne);
      all_tabs.filter(function(tab) {
        return tab.url.indexOf(text) >= 0;
      }).map(addOne);
      all_tabs.filter(function(tab) {
        return tab.title.match(fuzzy(text)) != null;
      }).map(addOne);
      return show_list(list);
    };
    input.addEventListener('input', function() {
      return suggest(input.value);
    });
    document.body.onkeydown = function(event) {
      var context, currentAt, length;
      if (event.keyCode === 13) {
        return window.close();
      } else if (event.keyCode === 40) {
        event.preventDefault();
        currentAt = page_list.data.currentAt;
        length = page_list.data.list.length;
        if ((currentAt + 1) < length) {
          page_list.set("currentAt", currentAt + 1);
        }
        context = page_list.data.list[page_list.data.currentAt];
        return gotoTab(context.id);
      } else if (event.keyCode === 38) {
        event.preventDefault();
        currentAt = page_list.data.currentAt;
        if (currentAt > 0) {
          page_list.set("currentAt", currentAt - 1);
        }
        context = page_list.data.list[page_list.data.currentAt];
        return gotoTab(context.id);
      } else if (event.keyCode === 27) {
        chrome.extension.sendMessage({
          word: 'log',
          data: initialTab
        });
        if (initialTab != null) {
          return gotoTab(initialTab.id, function() {
            return window.close();
          });
        }
      }
    };
    gotoTab = function(tabid, callback) {
      console.log("going to", tabid);
      chrome.tabs.update(tabid, {
        selected: true
      }, function() {
        return typeof callback === "function" ? callback() : void 0;
      });
      return q('.currentAt').scrollIntoViewIfNeeded();
    };
    page_list.on("select", function(event) {
      return gotoTab(event.context.id, function() {
        return window.close();
      });
    });
    input.focus();
    return suggest('');
  });

}).call(this);

/*
//@ sourceMappingURL=find.map
*/
