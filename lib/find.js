// Generated by CoffeeScript 1.6.3
var Wait, append, fuzzy, input, isKeyword, menu, q, render;

isKeyword = function(char) {
  return char.match(/[\w\d\s\u4E00-\u9FA5]/) != null;
};

fuzzy = function(text) {
  var query;
  query = text.split('').filter(isKeyword).join('.{0,8}');
  return new RegExp(query, 'i');
};

q = function(query) {
  return document.querySelector(query);
};

Wait = (function() {
  function Wait() {
    this.tasks = {};
  }

  Wait.prototype.wait = function(key) {
    return this.tasks[key] = true;
  };

  Wait.prototype.done = function(key) {
    delete this.tasks[key];
    if (Object.keys(this.tasks).length === 0) {
      return typeof this.task === "function" ? this.task() : void 0;
    }
  };

  return Wait;

})();

input = q('#key');

menu = q('#menu');

input.focus();

input.addEventListener('input', function() {
  var collection, wait;
  collection = [];
  menu.innerHTML = '';
  menu.style.visibility = 'hidden';
  wait = new Wait;
  wait.task = function() {
    collection.map(function(data) {
      return append(menu, data);
    });
    return menu.style.visibility = 'visible';
  };
  wait.wait('current');
  chrome.tabs.query({}, function(tabs) {
    var ones;
    ones = tabs.filter(function(tab) {
      return tab.title.match(fuzzy(input.value));
    });
    collection.push.apply(collection, ones);
    return wait.done('current');
  });
  wait.wait('history');
  chrome.history.search({
    text: input.value
  }, function(tabs) {
    var ones;
    ones = tabs.filter(function(tab) {
      return tab.title.match(fuzzy(input.value));
    });
    collection.push.apply(collection, ones);
    return wait.done('history');
  });
  wait.wait('bookmarks');
  return chrome.bookmarks.search(input.value, function(tabs) {
    var ones;
    ones = tabs.filter(function(tab) {
      return tab.title.match(fuzzy(input.value));
    });
    collection.push.apply(collection, ones);
    return wait.done('bookmarks');
  });
});

input.onkeydown = function(event) {
  var selected, tabid;
  if (event.keyCode === 13) {
    selected = q('#menu').children[0];
    if (selected != null) {
      tabid = parseInt(selected.children[1].getAttribute('data-tabid'));
      return chrome.tabs.update(tabid, {
        selected: true
      });
    }
  }
};

render = function(data) {
  data.url = data.url.replace(/https?\:\/\//, '');
  return "<div class='tab'>\n  <div class='icon'>\n    " + (data.icon != null ? "<img src='" + data.icon + "'>" : '') + "\n  </div>\n  <div class='content' " + (data.id != null ? "data-tabid='" + data.id + "'" : '') + ">\n    <div class='title'>" + data.title + "</div>\n    <div class='url'>" + data.url + "</div>\n  </div>\n</div>";
};

append = function(elem, data) {
  return elem.insertAdjacentHTML('beforeend', render(data));
};

/*
//@ sourceMappingURL=find.map
*/
