// Generated by CoffeeScript 1.6.3
var Wait, fuzzy, gotoTab, input, isKeyword, menu, q, render, suggest, time, timeCache,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

isKeyword = function(char) {
  return char.match(/[\w\d\s\u4E00-\u9FA5]/) != null;
};

fuzzy = function(text) {
  var query;
  query = text.split('').filter(isKeyword).join('.{0,8}');
  return new RegExp(query, 'i');
};

q = function(query) {
  return document.querySelector(query);
};

Wait = (function() {
  function Wait() {
    this.tasks = {};
  }

  Wait.prototype.wait = function(key) {
    return this.tasks[key] = true;
  };

  Wait.prototype.done = function(key) {
    delete this.tasks[key];
    if (Object.keys(this.tasks).length === 0) {
      return typeof this.task === "function" ? this.task() : void 0;
    }
  };

  return Wait;

})();

time = function() {
  return (new Date).getTime();
};

timeCache = 0;

input = q('#key');

menu = q('#menu');

input.focus();

suggest = function(text) {
  var addOne, list, menuHtml, newTime, wait;
  newTime = time();
  if ((newTime - timeCache) < 400) {
    return;
  }
  timeCache = newTime;
  list = [];
  wait = new Wait;
  menuHtml = '';
  wait.task = function() {
    var first;
    list.map(function(data) {
      return menuHtml += render(data);
    });
    menu.innerHTML = menuHtml;
    first = menu.children[0];
    if (first != null) {
      return first.id = 'choose';
    }
  };
  addOne = function(tab) {
    var urlList, _ref;
    urlList = list.map(function(tab) {
      return tab.url;
    });
    if (_ref = tab.url, __indexOf.call(urlList, _ref) < 0) {
      return list.push(tab);
    }
  };
  wait.wait('title');
  chrome.tabs.query({}, function(tabs) {
    var ones;
    ones = tabs.filter(function(tab) {
      return tab.title.indexOf(text) >= 0;
    });
    ones.map(addOne);
    return wait.done('title');
  });
  wait.wait('url');
  chrome.tabs.query({}, function(tabs) {
    var ones;
    ones = tabs.filter(function(tab) {
      return tab.url.indexOf(text) >= 0;
    });
    ones.map(addOne);
    return wait.done('url');
  });
  wait.wait('history');
  chrome.history.search({
    text: text
  }, function(tabs) {
    tabs.map(addOne);
    return wait.done('history');
  });
  wait.wait('bookmarks');
  return chrome.bookmarks.search(text, function(tabs) {
    tabs.map(addOne);
    return wait.done('bookmarks');
  });
};

input.addEventListener('input', function() {
  return suggest(input.value);
});

input.onkeydown = function(event) {
  var lastTab, nextTab, selected;
  if (event.keyCode === 13) {
    selected = q('#choose');
    if (selected != null) {
      return gotoTab(parseInt(selected.getAttribute('data-tabid')));
    }
  } else if (event.keyCode === 40) {
    nextTab = q('#choose').nextElementSibling;
    if (nextTab != null) {
      q('#choose').id = '';
      nextTab.id = 'choose';
      return nextTab.scrollIntoViewIfNeeded();
    }
  } else if (event.keyCode === 38) {
    lastTab = q('#choose').previousElementSibling;
    if (lastTab != null) {
      q('#choose').id = '';
      lastTab.id = 'choose';
      return lastTab.scrollIntoViewIfNeeded();
    }
  }
};

render = function(data) {
  var img;
  img = function(link) {
    return "<img src='" + link + "' class='icon'>";
  };
  return "<div class='tab' " + (data.id != null ? "data-tabid='" + data.id + "'" : '') + ">\n  <div class='content'>\n    <div class='title'>" + data.title + "</div>\n    <div class='url'>" + data.url + "</div>\n  </div>\n  " + (data.favIconUrl != null ? img(data.favIconUrl) : '') + "\n</div>";
};

gotoTab = function(tabid) {
  return chrome.tabs.get(tabid, function(tab) {
    var options, url;
    if (tab != null) {
      return chrome.tabs.update(tabid, {
        selected: true
      });
    } else {
      url = q('#choose').querySelector('.url').innerText;
      options = {
        url: url,
        active: true
      };
      return chrome.tabs.create(options);
    }
  });
};

suggest('');

/*
//@ sourceMappingURL=find.map
*/
